// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zcache_rpc.proto

package zcacherpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Data struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_94d17b23d99d3443, []int{0}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Data) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Data)(nil), "zcacherpc.Data")
}

func init() { proto.RegisterFile("zcache_rpc.proto", fileDescriptor_94d17b23d99d3443) }

var fileDescriptor_94d17b23d99d3443 = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x5d, 0x4b, 0xeb, 0x40,
	0x10, 0xbd, 0xb9, 0xed, 0xcd, 0x35, 0x53, 0xb5, 0x25, 0x88, 0x14, 0x9f, 0xa4, 0x4f, 0x5a, 0x4a,
	0x52, 0x5b, 0xfc, 0x03, 0x31, 0xb5, 0x84, 0x82, 0x94, 0xfa, 0xf1, 0xd0, 0x17, 0x89, 0xe9, 0xa0,
	0xc1, 0x66, 0x77, 0xd9, 0x6c, 0xa5, 0xe9, 0xef, 0xf6, 0x07, 0xc8, 0x6e, 0x54, 0xc4, 0xa7, 0xd9,
	0xb7, 0x64, 0x38, 0x67, 0xcf, 0xce, 0xcc, 0x39, 0x2c, 0x74, 0x76, 0x59, 0x9a, 0xbd, 0xe0, 0xa3,
	0x14, 0x59, 0x20, 0x24, 0x57, 0xdc, 0xf7, 0xea, 0x8a, 0x14, 0x59, 0x2f, 0x80, 0x66, 0x9c, 0xaa,
	0xd4, 0xef, 0x40, 0xe3, 0x15, 0xab, 0xae, 0x73, 0xea, 0x9c, 0x79, 0x0b, 0xfd, 0xe9, 0x1f, 0xc1,
	0xbf, 0xb7, 0x74, 0xbd, 0xc1, 0xee, 0x5f, 0x53, 0xab, 0x7f, 0x46, 0xef, 0x2d, 0x80, 0xa5, 0x26,
	0xcf, 0xcd, 0x49, 0x01, 0xec, 0x25, 0x6c, 0x8a, 0x6a, 0x86, 0x95, 0xdf, 0x0e, 0xbe, 0x8f, 0x0d,
	0xf4, 0x99, 0x27, 0xbf, 0x0b, 0xbd, 0x3f, 0xfe, 0x05, 0x78, 0x5f, 0xf8, 0x92, 0x42, 0x18, 0x3a,
	0xfe, 0x10, 0x20, 0x61, 0xb7, 0xa8, 0x1e, 0xb4, 0x3e, 0x51, 0xa4, 0x95, 0xb0, 0x18, 0xd7, 0xa8,
	0x90, 0x7a, 0x2f, 0xd3, 0xc7, 0x64, 0x2b, 0xb8, 0x54, 0x74, 0x7c, 0x52, 0x90, 0xf1, 0x23, 0xd8,
	0xff, 0x71, 0xa5, 0x92, 0xde, 0xc6, 0x64, 0x2b, 0x90, 0x95, 0x39, 0x67, 0x74, 0x4a, 0x3d, 0xde,
	0x9b, 0x4d, 0x41, 0xa2, 0x84, 0x7a, 0x23, 0x33, 0xac, 0x12, 0x96, 0x49, 0xba, 0xc6, 0x27, 0x21,
	0xaa, 0xac, 0x34, 0x62, 0xb4, 0xd4, 0xd0, 0x84, 0xc8, 0x62, 0x83, 0x57, 0xbc, 0x28, 0x72, 0xda,
	0x46, 0x06, 0xe0, 0x26, 0x2c, 0x96, 0x5c, 0x90, 0xd0, 0xe7, 0xd0, 0x98, 0xa2, 0xa2, 0x36, 0x6b,
	0xed, 0x3d, 0x5b, 0x7b, 0xdf, 0x8b, 0x55, 0xaa, 0x90, 0x4e, 0x09, 0xe1, 0xbf, 0x5d, 0xe8, 0x06,
	0xe0, 0x5a, 0xa4, 0x41, 0xcf, 0x92, 0x9e, 0x85, 0x21, 0x80, 0x65, 0x12, 0x42, 0xf0, 0xec, 0x72,
	0x10, 0x82, 0x67, 0x97, 0x82, 0x3e, 0x34, 0xc9, 0x01, 0x30, 0xce, 0x21, 0xfb, 0xb2, 0x0f, 0x4d,
	0xb2, 0xed, 0x07, 0xe0, 0x5a, 0x38, 0xfe, 0x12, 0xda, 0xf5, 0xd4, 0xaf, 0x25, 0x2f, 0x16, 0xb8,
	0xca, 0x69, 0xc3, 0x1c, 0xc3, 0x41, 0xbd, 0xda, 0x3b, 0x4e, 0x26, 0x45, 0x7d, 0x38, 0xce, 0x79,
	0xf0, 0xac, 0x2b, 0xb8, 0x4d, 0x0b, 0xb1, 0xc6, 0x32, 0xd8, 0x69, 0x4c, 0x74, 0xb8, 0x34, 0xd8,
	0x85, 0xc8, 0xcc, 0x8b, 0x30, 0x77, 0x9e, 0x5c, 0xf3, 0xc8, 0x8c, 0x3f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x75, 0x9f, 0x7a, 0xc1, 0x78, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ZacheProtoClient is the client API for ZacheProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZacheProtoClient interface {
	// 获取单个value
	InGetKey(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 获取全部key/value
	InGetKeys(ctx context.Context, in *Data, opts ...grpc.CallOption) (ZacheProto_InGetKeysClient, error)
	// 设置key/value
	InSetValue(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 删除key
	InDeleteKey(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 导出数据
	InExport(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 导入数据
	InImport(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 删除所有数据
	InDeleteKeys(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 扩容
	InExpension(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 获取key个数
	InGetKeyNum(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// key加一
	InKeyIncr(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// key加n
	InKeyIncrBy(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// key减一
	InKeyDecr(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// key减n
	InKeyDecrBy(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 提交事务
	InCommit(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 丢弃事务
	InDrop(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	//外部接口
	// 获取单个value
	Get(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 删除key
	DeleteKey(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 设置key/value
	SetValue(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 更新key/value
	UpdateValue(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 获取全部key/value
	GetKeys(ctx context.Context, in *Data, opts ...grpc.CallOption) (ZacheProto_GetKeysClient, error)
	// 导出数据
	Export(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 导入数据
	Import(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 删除所有数据
	DeleteKeys(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 扩容
	Expension(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 获取key个数
	GetKeyNum(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// key加一
	Incr(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// key加n
	IncrBy(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// key减一
	Decr(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// key减n
	DecrBy(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 从redis导入数据
	ImportFromRedis(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 导出数据至redis
	ExportToRedis(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
}

type zacheProtoClient struct {
	cc *grpc.ClientConn
}

func NewZacheProtoClient(cc *grpc.ClientConn) ZacheProtoClient {
	return &zacheProtoClient{cc}
}

func (c *zacheProtoClient) InGetKey(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/InGetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) InGetKeys(ctx context.Context, in *Data, opts ...grpc.CallOption) (ZacheProto_InGetKeysClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ZacheProto_serviceDesc.Streams[0], "/zcacherpc.ZacheProto/InGetKeys", opts...)
	if err != nil {
		return nil, err
	}
	x := &zacheProtoInGetKeysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ZacheProto_InGetKeysClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type zacheProtoInGetKeysClient struct {
	grpc.ClientStream
}

func (x *zacheProtoInGetKeysClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zacheProtoClient) InSetValue(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/InSetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) InDeleteKey(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/InDeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) InExport(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/InExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) InImport(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/InImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) InDeleteKeys(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/InDeleteKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) InExpension(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/InExpension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) InGetKeyNum(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/InGetKeyNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) InKeyIncr(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/InKeyIncr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) InKeyIncrBy(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/InKeyIncrBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) InKeyDecr(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/InKeyDecr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) InKeyDecrBy(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/InKeyDecrBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) InCommit(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/InCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) InDrop(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/InDrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) Get(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) DeleteKey(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/DeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) SetValue(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/SetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) UpdateValue(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/UpdateValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) GetKeys(ctx context.Context, in *Data, opts ...grpc.CallOption) (ZacheProto_GetKeysClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ZacheProto_serviceDesc.Streams[1], "/zcacherpc.ZacheProto/GetKeys", opts...)
	if err != nil {
		return nil, err
	}
	x := &zacheProtoGetKeysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ZacheProto_GetKeysClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type zacheProtoGetKeysClient struct {
	grpc.ClientStream
}

func (x *zacheProtoGetKeysClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zacheProtoClient) Export(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) Import(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/Import", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) DeleteKeys(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/DeleteKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) Expension(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/Expension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) GetKeyNum(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/GetKeyNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) Incr(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/Incr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) IncrBy(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/IncrBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) Decr(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/Decr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) DecrBy(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/DecrBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) ImportFromRedis(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/ImportFromRedis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) ExportToRedis(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/ExportToRedis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZacheProtoServer is the server API for ZacheProto service.
type ZacheProtoServer interface {
	// 获取单个value
	InGetKey(context.Context, *Data) (*Data, error)
	// 获取全部key/value
	InGetKeys(*Data, ZacheProto_InGetKeysServer) error
	// 设置key/value
	InSetValue(context.Context, *Data) (*Data, error)
	// 删除key
	InDeleteKey(context.Context, *Data) (*Data, error)
	// 导出数据
	InExport(context.Context, *Data) (*Data, error)
	// 导入数据
	InImport(context.Context, *Data) (*Data, error)
	// 删除所有数据
	InDeleteKeys(context.Context, *Data) (*Data, error)
	// 扩容
	InExpension(context.Context, *Data) (*Data, error)
	// 获取key个数
	InGetKeyNum(context.Context, *Data) (*Data, error)
	// key加一
	InKeyIncr(context.Context, *Data) (*Data, error)
	// key加n
	InKeyIncrBy(context.Context, *Data) (*Data, error)
	// key减一
	InKeyDecr(context.Context, *Data) (*Data, error)
	// key减n
	InKeyDecrBy(context.Context, *Data) (*Data, error)
	// 提交事务
	InCommit(context.Context, *Data) (*Data, error)
	// 丢弃事务
	InDrop(context.Context, *Data) (*Data, error)
	//外部接口
	// 获取单个value
	Get(context.Context, *Data) (*Data, error)
	// 删除key
	DeleteKey(context.Context, *Data) (*Data, error)
	// 设置key/value
	SetValue(context.Context, *Data) (*Data, error)
	// 更新key/value
	UpdateValue(context.Context, *Data) (*Data, error)
	// 获取全部key/value
	GetKeys(*Data, ZacheProto_GetKeysServer) error
	// 导出数据
	Export(context.Context, *Data) (*Data, error)
	// 导入数据
	Import(context.Context, *Data) (*Data, error)
	// 删除所有数据
	DeleteKeys(context.Context, *Data) (*Data, error)
	// 扩容
	Expension(context.Context, *Data) (*Data, error)
	// 获取key个数
	GetKeyNum(context.Context, *Data) (*Data, error)
	// key加一
	Incr(context.Context, *Data) (*Data, error)
	// key加n
	IncrBy(context.Context, *Data) (*Data, error)
	// key减一
	Decr(context.Context, *Data) (*Data, error)
	// key减n
	DecrBy(context.Context, *Data) (*Data, error)
	// 从redis导入数据
	ImportFromRedis(context.Context, *Data) (*Data, error)
	// 导出数据至redis
	ExportToRedis(context.Context, *Data) (*Data, error)
}

func RegisterZacheProtoServer(s *grpc.Server, srv ZacheProtoServer) {
	s.RegisterService(&_ZacheProto_serviceDesc, srv)
}

func _ZacheProto_InGetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).InGetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/InGetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).InGetKey(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_InGetKeys_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Data)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZacheProtoServer).InGetKeys(m, &zacheProtoInGetKeysServer{stream})
}

type ZacheProto_InGetKeysServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type zacheProtoInGetKeysServer struct {
	grpc.ServerStream
}

func (x *zacheProtoInGetKeysServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func _ZacheProto_InSetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).InSetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/InSetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).InSetValue(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_InDeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).InDeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/InDeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).InDeleteKey(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_InExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).InExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/InExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).InExport(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_InImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).InImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/InImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).InImport(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_InDeleteKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).InDeleteKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/InDeleteKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).InDeleteKeys(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_InExpension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).InExpension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/InExpension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).InExpension(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_InGetKeyNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).InGetKeyNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/InGetKeyNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).InGetKeyNum(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_InKeyIncr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).InKeyIncr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/InKeyIncr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).InKeyIncr(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_InKeyIncrBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).InKeyIncrBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/InKeyIncrBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).InKeyIncrBy(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_InKeyDecr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).InKeyDecr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/InKeyDecr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).InKeyDecr(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_InKeyDecrBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).InKeyDecrBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/InKeyDecrBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).InKeyDecrBy(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_InCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).InCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/InCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).InCommit(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_InDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).InDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/InDrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).InDrop(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).Get(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).DeleteKey(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_SetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).SetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/SetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).SetValue(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_UpdateValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).UpdateValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/UpdateValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).UpdateValue(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_GetKeys_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Data)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZacheProtoServer).GetKeys(m, &zacheProtoGetKeysServer{stream})
}

type ZacheProto_GetKeysServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type zacheProtoGetKeysServer struct {
	grpc.ServerStream
}

func (x *zacheProtoGetKeysServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func _ZacheProto_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).Export(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_Import_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/Import",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).Import(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_DeleteKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).DeleteKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/DeleteKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).DeleteKeys(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_Expension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).Expension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/Expension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).Expension(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_GetKeyNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).GetKeyNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/GetKeyNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).GetKeyNum(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_Incr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).Incr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/Incr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).Incr(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_IncrBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).IncrBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/IncrBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).IncrBy(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_Decr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).Decr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/Decr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).Decr(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_DecrBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).DecrBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/DecrBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).DecrBy(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_ImportFromRedis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).ImportFromRedis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/ImportFromRedis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).ImportFromRedis(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_ExportToRedis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).ExportToRedis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/ExportToRedis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).ExportToRedis(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZacheProto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zcacherpc.ZacheProto",
	HandlerType: (*ZacheProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InGetKey",
			Handler:    _ZacheProto_InGetKey_Handler,
		},
		{
			MethodName: "InSetValue",
			Handler:    _ZacheProto_InSetValue_Handler,
		},
		{
			MethodName: "InDeleteKey",
			Handler:    _ZacheProto_InDeleteKey_Handler,
		},
		{
			MethodName: "InExport",
			Handler:    _ZacheProto_InExport_Handler,
		},
		{
			MethodName: "InImport",
			Handler:    _ZacheProto_InImport_Handler,
		},
		{
			MethodName: "InDeleteKeys",
			Handler:    _ZacheProto_InDeleteKeys_Handler,
		},
		{
			MethodName: "InExpension",
			Handler:    _ZacheProto_InExpension_Handler,
		},
		{
			MethodName: "InGetKeyNum",
			Handler:    _ZacheProto_InGetKeyNum_Handler,
		},
		{
			MethodName: "InKeyIncr",
			Handler:    _ZacheProto_InKeyIncr_Handler,
		},
		{
			MethodName: "InKeyIncrBy",
			Handler:    _ZacheProto_InKeyIncrBy_Handler,
		},
		{
			MethodName: "InKeyDecr",
			Handler:    _ZacheProto_InKeyDecr_Handler,
		},
		{
			MethodName: "InKeyDecrBy",
			Handler:    _ZacheProto_InKeyDecrBy_Handler,
		},
		{
			MethodName: "InCommit",
			Handler:    _ZacheProto_InCommit_Handler,
		},
		{
			MethodName: "InDrop",
			Handler:    _ZacheProto_InDrop_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ZacheProto_Get_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _ZacheProto_DeleteKey_Handler,
		},
		{
			MethodName: "SetValue",
			Handler:    _ZacheProto_SetValue_Handler,
		},
		{
			MethodName: "UpdateValue",
			Handler:    _ZacheProto_UpdateValue_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _ZacheProto_Export_Handler,
		},
		{
			MethodName: "Import",
			Handler:    _ZacheProto_Import_Handler,
		},
		{
			MethodName: "DeleteKeys",
			Handler:    _ZacheProto_DeleteKeys_Handler,
		},
		{
			MethodName: "Expension",
			Handler:    _ZacheProto_Expension_Handler,
		},
		{
			MethodName: "GetKeyNum",
			Handler:    _ZacheProto_GetKeyNum_Handler,
		},
		{
			MethodName: "Incr",
			Handler:    _ZacheProto_Incr_Handler,
		},
		{
			MethodName: "IncrBy",
			Handler:    _ZacheProto_IncrBy_Handler,
		},
		{
			MethodName: "Decr",
			Handler:    _ZacheProto_Decr_Handler,
		},
		{
			MethodName: "DecrBy",
			Handler:    _ZacheProto_DecrBy_Handler,
		},
		{
			MethodName: "ImportFromRedis",
			Handler:    _ZacheProto_ImportFromRedis_Handler,
		},
		{
			MethodName: "ExportToRedis",
			Handler:    _ZacheProto_ExportToRedis_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InGetKeys",
			Handler:       _ZacheProto_InGetKeys_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetKeys",
			Handler:       _ZacheProto_GetKeys_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zcache_rpc.proto",
}
