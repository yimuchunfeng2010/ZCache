// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zcache_rpc.proto

package zcacherpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The response message containing the greetings
type Data struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_94d17b23d99d3443, []int{0}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Data) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Data)(nil), "zcacherpc.Data")
}

func init() { proto.RegisterFile("zcache_rpc.proto", fileDescriptor_94d17b23d99d3443) }

var fileDescriptor_94d17b23d99d3443 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xa8, 0x4a, 0x4e, 0x4c,
	0xce, 0x48, 0x8d, 0x2f, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x88,
	0x14, 0x15, 0x24, 0x2b, 0xe9, 0x71, 0xb1, 0xb8, 0x24, 0x96, 0x24, 0x0a, 0x09, 0x70, 0x31, 0x67,
	0xa7, 0x56, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x98, 0x42, 0x22, 0x5c, 0xac, 0x65,
	0x89, 0x39, 0xa5, 0xa9, 0x12, 0x4c, 0x60, 0x31, 0x08, 0xc7, 0xe8, 0x12, 0x23, 0x17, 0x57, 0x14,
	0x48, 0x73, 0x00, 0xd8, 0x24, 0x3d, 0x2e, 0x0e, 0xf7, 0xd4, 0x92, 0x30, 0x90, 0x94, 0x10, 0xbf,
	0x1e, 0xdc, 0x58, 0x3d, 0x90, 0x99, 0x52, 0xe8, 0x02, 0x4a, 0x0c, 0x42, 0x86, 0x5c, 0x9c, 0x30,
	0xf5, 0xc5, 0xc4, 0x68, 0x30, 0x60, 0x04, 0x59, 0x11, 0x4c, 0x9a, 0x15, 0xdc, 0x2e, 0xa9, 0x39,
	0xa9, 0x25, 0xa9, 0x44, 0x6b, 0x71, 0xd2, 0xe2, 0x12, 0xcb, 0xcc, 0xd7, 0x4b, 0x07, 0x89, 0xa4,
	0x56, 0x24, 0xe6, 0x16, 0xe4, 0xa4, 0x16, 0xeb, 0x55, 0x81, 0xd4, 0x38, 0xf1, 0x45, 0x81, 0xd5,
	0x06, 0x15, 0x24, 0x83, 0xfd, 0x1b, 0xc0, 0x98, 0xc4, 0x06, 0x0e, 0x42, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xe7, 0xa1, 0x42, 0xa5, 0x56, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ZacheProtoClient is the client API for ZacheProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZacheProtoClient interface {
	// 获取单个value
	GetValue(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 获取全部key/value
	GetValues(ctx context.Context, in *Data, opts ...grpc.CallOption) (ZacheProto_GetValuesClient, error)
	// 设置key/value
	SetValue(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 删除key/value
	DeleteValue(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
}

type zacheProtoClient struct {
	cc *grpc.ClientConn
}

func NewZacheProtoClient(cc *grpc.ClientConn) ZacheProtoClient {
	return &zacheProtoClient{cc}
}

func (c *zacheProtoClient) GetValue(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) GetValues(ctx context.Context, in *Data, opts ...grpc.CallOption) (ZacheProto_GetValuesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ZacheProto_serviceDesc.Streams[0], "/zcacherpc.ZacheProto/GetValues", opts...)
	if err != nil {
		return nil, err
	}
	x := &zacheProtoGetValuesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ZacheProto_GetValuesClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type zacheProtoGetValuesClient struct {
	grpc.ClientStream
}

func (x *zacheProtoGetValuesClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zacheProtoClient) SetValue(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/SetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zacheProtoClient) DeleteValue(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/zcacherpc.ZacheProto/DeleteValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZacheProtoServer is the server API for ZacheProto service.
type ZacheProtoServer interface {
	// 获取单个value
	GetValue(context.Context, *Data) (*Data, error)
	// 获取全部key/value
	GetValues(*Data, ZacheProto_GetValuesServer) error
	// 设置key/value
	SetValue(context.Context, *Data) (*Data, error)
	// 删除key/value
	DeleteValue(context.Context, *Data) (*Data, error)
}

func RegisterZacheProtoServer(s *grpc.Server, srv ZacheProtoServer) {
	s.RegisterService(&_ZacheProto_serviceDesc, srv)
}

func _ZacheProto_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).GetValue(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_GetValues_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Data)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZacheProtoServer).GetValues(m, &zacheProtoGetValuesServer{stream})
}

type ZacheProto_GetValuesServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type zacheProtoGetValuesServer struct {
	grpc.ServerStream
}

func (x *zacheProtoGetValuesServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func _ZacheProto_SetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).SetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/SetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).SetValue(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZacheProto_DeleteValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZacheProtoServer).DeleteValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zcacherpc.ZacheProto/DeleteValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZacheProtoServer).DeleteValue(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZacheProto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zcacherpc.ZacheProto",
	HandlerType: (*ZacheProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetValue",
			Handler:    _ZacheProto_GetValue_Handler,
		},
		{
			MethodName: "SetValue",
			Handler:    _ZacheProto_SetValue_Handler,
		},
		{
			MethodName: "DeleteValue",
			Handler:    _ZacheProto_DeleteValue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetValues",
			Handler:       _ZacheProto_GetValues_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zcache_rpc.proto",
}
